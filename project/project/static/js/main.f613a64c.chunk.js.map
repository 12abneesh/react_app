{"version":3,"sources":["utils/uuid.tsx","utils/dates.tsx","service/explorer.service.tsx","components/header.component.tsx","utils/grid_helper.tsx","components/orders.component.tsx","components/positions.component.tsx","components/securities.component.tsx","components/weights.component.tsx","components/inputs.component.tsx","components/logs.component.tsx","components/info.component.tsx","components/summary.component.tsx","components/main.component.tsx","components/dataframe.component.tsx","components/group_charts.component.tsx","components/group_rebal_stats.component.tsx","components/portfolio_group.component.tsx","components/react_table_components/react_table_action.component.tsx","components/react_table_components/react_table.component.tsx","utils/Spinner.tsx","components/portfolio_list.component.tsx","views/typeahead.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["uuid","uuid_gen","yyyymmdd","dt","moment","format","ExplorerService","connectCallback","base_url","ws","promises","Map","this","getBaseUrl","WebSocket","onerror","error","console","log","onopen","onclose","onmessage","message","data","JSON","parse","request_id","promise","get","msg_type","resolve","values","value","df","columns","rows","reject","window","location","host","indexOf","origin","hostname","groupId","rebalId","group_id","rebal_id","Promise","set","send","stringify","requestId","smsId","sms_id","rebalDate","rebal_date","groupRebalRequest","config","url","concat","body","method","ajax","pipe","map","results","response","HeaderComponent","classes","props","className","grow","AppBar","position","color","Toolbar","variant","src","alt","logo","Typography","title","noWrap","Component","withStyles","theme","flexGrow","width","display","breakpoints","up","valueFormatter","col","formatter","doubleFormatter","double4dpsFormatter","doubleCommaFormatter","intCommaFormatter","cellStyle","cell_style","buySellStyle","columnFilter","dataType","createAgColumn","headerName","header_name","field","type","filter","floatingFilter","suppressSizeToFit","resizable","params","numeral","OrdersComponent","state","gridApi","undefined","onGridReady","bind","onGridDataUpdated","onRowSelected","oldProps","orders","setState","columnApi","api","sizeColumnsToFit","event","onSecuritySelected","node","selected","style","height","defaultColDef","sortable","rowSelection","rowData","applyColumnDefOrder","onFirstDataRendered","onRowDataUpdated","onRowDataChanged","renderEmpty","renderOrders","PositionsComponent","positions","renderPositions","SecuritiesComponent","securities","renderSecurities","WeightsComponent","weights","renderWeights","TabPanel","children","index","other","role","hidden","id","InputsComponent","tab_value","handleChange","newValue","rebal_weights","rebal_orders","root","Tabs","onChange","Tab","label","LogsComponent","rebal_logs","InfoComponent","rebal_info","push","TableRow","TableCell","Table","renderInfo","SummaryComponent","Grid","container","item","xs","MainComponent","explorer","onConnection","match","loadRebalData","resetState","rebalInfo","then","catch","err","rebalSecurities","rebalPositions","rebalWeights","rebalOrders","rebalLogs","logs","direction","spacing","DataframeComponent","dataframe","setTimeout","allColIds","getAllColumns","colId","autoSizeColumns","onSelect","renderDataframe","backgroundColor","paddingLeft","FlexRadial","makeVisFlexible","RadialChart","GroupChartComponent","groupRebals","buyCount","sellCount","quantity","angle","showLabels","buyNotl","sellNotl","row","Math","abs","buySell","industries","industry","curr","total","Array","from","forEach","key","renderBuySell","renderBuySellNotional","renderIndustry","group_rebals","renderCharts","GroupRebalStatsComponent","TableBody","renderValues","PortfolioGroupComponent","rebal_dates","group_rebal_portfolios","group_rebal_states","group_security_orders","rebal_securities","rebal_positions","selected_portfolio","onConnect","onSelectRebalDate","onSelectPortfolioRebal","onOrderSelected","onRebalSecuritySelected","getGroupPortfolios","groupRebalDates","dt_str","toDate","from_yyyymmdd","length","dataDate","groupRebalStats","portfolioGroupId","groupRebalPortfoliosRest","subscribe","next","portfolioRebal","loadGroupRebalData","loadSingleRebalData","security","groupSecurityOrders","order","rebal_security","renderGroup","renderPortfolio","GlobalFilter","setFilter","useState","setValue","_this","target","placeholder","ReactTable","useEffect","groupByColumns","setGroupBy","tableInstance","useTable","useGlobalFilter","useGroupBy","useExpanded","useRowSelect","hooks","visibleColumns","Header","getToggleAllRowsSelectedProps","IndeterminateCheckbox","Cell","getToggleRowSelectedProps","React","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","current","getTableProps","getTableBodyProps","headerGroups","prepareRow","globalFilter","groupBy","expanded","setGlobalFilter","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","getRowProps","cells","cell","getCellProps","isGrouped","getToggleRowExpandedProps","isExpanded","icon","faAngleDown","faAngleRight","subRows","isAggregated","isPlaceholder","alignItems","justifyContent","CircularProgress","PortfolioList","showLoader","columnData","getPortfolioData","explorerSrvc","toString","Date","accessor","rowInfo","Number","TypeaheadComponent","onSearch","highlight","firmId","search_string","search_results","options","x","loading","minWidth","cellRenderer","display_name","toLowerCase","substr","substring","fetch","resp","json","json_res","finally","content","TextField","InputProps","endAdornment","Fragment","size","padding","ModuleRegistry","registerModules","ClientSideRowModelModule","App","path","component","TypeAheadComponent","Boolean","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f613a64c.chunk.js","sourcesContent":["\nimport { v4 as uuid_gen } from 'uuid';\n\nfunction uuid() : string {\n  return uuid_gen();\n}\n\nexport {\n  uuid,\n};\n","\nimport moment from 'moment';\n\n\nfunction yyyymmdd(dt: Date) : string {\n  return moment(dt).format('YYYYMMDD');\n}\n\nfunction from_yyyymmdd(dt_str: string) : Date {\n  return moment(dt_str, 'YYYYMMDD').toDate();\n}\n\nexport {\n  yyyymmdd,\n  from_yyyymmdd,\n};\n","\nimport DataFrame from '../models/dataframe';\nimport Values from '../models/values';\nimport { uuid } from '../utils/uuid';\nimport { yyyymmdd } from '../utils/dates';\nimport { Observable } from 'rxjs';\nimport { ajax, AjaxConfig, AjaxResponse} from 'rxjs/ajax';\nimport GroupRebalRequest from '../models/request_models';\nimport GroupRebalPortfoliosResponse from '../models/response_models';\nimport { map } from 'rxjs/operators';\n\ntype Nullable<T> = T | null;\n\ntype PromiseHandler = {\n  resolve: any,\n  reject: any,\n}\n\nclass ExplorerService {\n  base_url;\n  ws: Nullable<WebSocket> = null;\n  promises: Map<string, PromiseHandler> = new Map();\n  connectCallback: CallableFunction;\n\n  constructor(connectCallback: CallableFunction) {\n    this.base_url = this.getBaseUrl();\n    this.connectCallback = connectCallback;\n    this.ws = new WebSocket('ws://127.0.0.1:9001/rebal');\n    this.ws.onerror = (error) => {\n      console.log(error);\n    };\n\n    this.ws.onopen = () => {\n      console.log('explorer: open');\n      this.connectCallback();\n    }\n\n    this.ws.onclose = () => {\n      console.log('explorer: close');\n    }\n\n    this.ws.onmessage = (message) => {\n      console.log('rebal message');\n      console.log(message);\n      const data = JSON.parse(message.data);\n      const request_id = data['request_id'];\n      const promise = this.promises.get(request_id);\n      if (promise == null) {\n        console.log('Unknown request: ' + request_id);\n        return;\n      }\n\n      switch (data.msg_type) {\n        case 'rebal_info':\n        case 'rebal_stats':\n        case 'group_rebal_dates':\n        case 'group_rebal_stats':\n          promise.resolve({ values: data.value });\n          break;\n\n        case 'rebal_securities':\n        case 'rebal_positions':\n        case 'rebal_weights':\n        case 'rebal_orders':\n        case 'rebal_logs':\n        case 'group_rebal_portfolios':\n        case 'group_rebals':\n        case 'group_security_orders':\n          const df: DataFrame = { columns: data.columns, rows: data.rows };\n          promise.resolve(df);\n          break;\n\n        default:\n          console.log('unsupported msg type: ' + data.msg_type);\n          promise.reject('');\n      }\n    }\n  }\n\n  getBaseUrl() {\n    if(window.location.host.indexOf(\"localhost\") === -1){\n      return window.location.origin;\n    } else {\n      return \"http://\"+window.location.hostname+\":8888\";\n    }\n  }\n\n  rebalInfo(groupId: string, rebalId: string): Promise<Values> {\n    const request_id = uuid();\n    const message = {\n      msg_type: 'rebal_info',\n      group_id: groupId,\n      rebal_id: rebalId,\n      request_id: request_id,\n    };\n\n    const promise = new Promise<Values>((resolve, reject) => {\n      this.promises.set(request_id, { resolve: resolve, reject: reject });\n    });\n\n    this.ws?.send(JSON.stringify(message));\n    return promise;\n  }\n\n  rebalSecurities(groupId: string, rebalId: string): Promise<DataFrame> {\n    const request_id = uuid();\n    const message = {\n      msg_type: 'rebal_securities',\n      group_id: groupId,\n      rebal_id: rebalId,\n      request_id: request_id,\n    };\n\n    const promise = new Promise<DataFrame>((resolve, reject) => {\n      this.promises.set(request_id, { resolve, reject });\n    });\n\n    this.ws?.send(JSON.stringify(message));\n    return promise;\n  }\n\n  rebalWeights(groupId: string, rebalId: string): Promise<DataFrame> {\n    const request_id = uuid();\n    const message = {\n      msg_type: 'rebal_weights',\n      group_id: groupId,\n      rebal_id: rebalId,\n      request_id: request_id,\n    };\n\n    const promise = new Promise<DataFrame>((resolve, reject) => {\n      this.promises.set(request_id, { resolve, reject });\n    });\n\n    this.ws?.send(JSON.stringify(message));\n    return promise;\n  }\n\n  rebalPositions(groupId: string, rebalId: string): Promise<DataFrame> {\n    const requestId = uuid();\n    const message = {\n      msg_type: 'rebal_positions',\n      group_id: groupId,\n      rebal_id: rebalId,\n      request_id: requestId,\n    };\n\n    const promise = new Promise<DataFrame>((resolve, reject) => {\n      this.promises.set(requestId, { resolve, reject });\n    });\n\n    this.ws?.send(JSON.stringify(message));\n    return promise;\n  }\n\n  rebalOrders(groupId: string, rebalId: string): Promise<DataFrame> {\n    const requestId = uuid();\n    const message = {\n      msg_type: 'rebal_orders',\n      group_id: groupId,\n      rebal_id: rebalId,\n      request_id: requestId,\n    };\n\n    const promise = new Promise<DataFrame>((resolve, reject) => {\n      this.promises.set(requestId, { resolve, reject });\n    });\n\n    this.ws?.send(JSON.stringify(message));\n    return promise;\n  }\n\n  rebalLogs(groupId: string, rebalId: string, smsId: string | undefined) {\n    const requestId = uuid();\n    const message = {\n      msg_type: 'rebal_logs',\n      group_id: groupId,\n      rebal_id: rebalId,\n      request_id: requestId,\n      sms_id: smsId,\n    };\n\n    const promise = new Promise<DataFrame>((resolve, reject) => {\n      this.promises.set(requestId, { resolve, reject });\n    });\n\n    this.ws?.send(JSON.stringify(message));\n    return promise;\n  }\n\n  groupRebalDates(groupId: string): Promise<Values> {\n    const request_id = uuid();\n    const message = {\n      msg_type: 'group_rebal_dates',\n      group_id: groupId,\n      request_id: request_id,\n    };\n\n    const promise = new Promise<Values>((resolve, reject) => {\n      this.promises.set(request_id, { resolve, reject });\n    });\n\n    this.ws?.send(JSON.stringify(message));\n    return promise;\n  }\n\n  groupRebalStats(groupId: string, rebalDate: Date): Promise<Values> {\n    const request_id = uuid();\n    const message = {\n      msg_type: 'group_rebal_stats',\n      group_id: groupId,\n      request_id: request_id,\n      rebal_date: yyyymmdd(rebalDate),\n    };\n\n    const promise = new Promise<Values>((resolve, reject) => {\n      this.promises.set(request_id, { resolve, reject });\n    });\n\n    this.ws?.send(JSON.stringify(message));\n    return promise;\n  }\n\n  groupRebalPortfolios(groupId: string, rebalDate: Date) {\n    const request_id = uuid();\n    const message = {\n      msg_type: 'group_rebal_portfolios',\n      request_id: request_id,\n      group_id: groupId,\n      rebal_date: yyyymmdd(rebalDate),\n    };\n\n    const promise = new Promise<DataFrame>((resolve, reject) => {\n      this.promises.set(request_id, { resolve, reject });\n    });\n\n    this.ws?.send(JSON.stringify(message));\n    return promise;\n  }\n\n  groupRebals(groupId: string, rebalDate: Date): Promise<DataFrame> {\n    const request_id = uuid();\n    const message = {\n      msg_type: 'group_rebals',\n      request_id: request_id,\n      group_id: groupId,\n      rebal_date: yyyymmdd(rebalDate),\n    };\n\n    const promise = new Promise<DataFrame>((resolve, reject) => {\n      this.promises.set(request_id, { resolve, reject });\n    });\n\n    this.ws?.send(JSON.stringify(message));\n    return promise;\n  }\n\n  groupSecurityOrders(groupId: string, smsId: string, rebalDate: Date): Promise<DataFrame> {\n    const requestId = uuid();\n    const message = {\n      msg_type: 'group_security_orders',\n      request_id: requestId,\n      group_id: groupId,\n      sms_id: smsId,\n      rebal_date: yyyymmdd(rebalDate),\n    };\n\n    const promise = new Promise<DataFrame>((resolve, reject) => {\n      this.promises.set(requestId, { resolve, reject });\n    });\n\n    this.ws?.send(JSON.stringify(message));\n    return promise;\n  }\n\n  /**\n   * REST calls integration starts\n   */\n\n  /**\n   * @description This is used to get portfolio List on rebal date and group id\n   * @param groupId\n   * @param rebalDate\n   * @returns Observable of type GroupRebalPortfoliosResponse\n   */\n  groupRebalPortfoliosRest(groupRebalRequest: GroupRebalRequest): Observable<GroupRebalPortfoliosResponse> {\n    const config: AjaxConfig = {\n      url: this.base_url.concat('/group_rebal_portfolios'),\n      body: groupRebalRequest,\n      method: 'POST'\n    }\n    return ajax(config).pipe(map((results:AjaxResponse<any>) => results.response));\n  }\n  /**\n   * REST calls integration ends\n   */\n}\n\nexport default ExplorerService;\n","\nimport React, { Component } from 'react';\nimport { Theme, withStyles } from '@material-ui/core/styles';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\n// TODO this will be updated as part of ticket 241/253\nconst styles = (theme: Theme) => ({\n  grow: {\n    flexGrow: 1,\n  },\n  logo: {\n    width: '3rem'\n  },\n  title: {\n    color: 'white',\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n});\n\nexport interface HeaderProps {\n  classes: any,\n  title: string\n}\n\ninterface HeaderState {\n\n}\n\nclass HeaderComponent extends Component<HeaderProps, HeaderState> {\n  render() {\n    const { classes } = this.props;\n    return (\n      <div className={classes.grow}>\n        <AppBar position=\"static\" color=\"primary\">\n          <Toolbar variant=\"dense\">\n            <img src={\"/assets/addepar_logo.png\"} alt=\"Addepar\" className={classes.logo} />\n            <Typography className={classes.title} variant=\"h6\" noWrap>\n              {this.props.title}\n            </Typography>\n            <div className={classes.grow} />\n          </Toolbar>\n        </AppBar>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(HeaderComponent);\n","\nimport React from 'react';\nimport { AgGridColumn } from '@ag-grid-community/react';\nimport numeral from 'numeral';\n\nimport Column from '../models/column';\n\n\nfunction valueFormatter(col: Column) {\n  if (col.formatter === 'double') {\n    return doubleFormatter;\n  } else if (col.formatter === 'double_4dps') {\n    return double4dpsFormatter;\n  } else if (col.formatter === 'double_comma') {\n    return doubleCommaFormatter;\n  } else if (col.formatter === 'int_comma') {\n    return intCommaFormatter;\n  } else {\n    return undefined;\n  }\n}\n\nfunction cellStyle(col: Column) {\n  if (col.cell_style === 'buy_sell') {\n    return buySellStyle;\n  } else {\n    return undefined;\n  }\n}\n\nfunction columnFilter(col: Column) {\n    if (col.dataType === 'double') {\n        return 'agNumberColumnFilter';\n    } else if (col.dataType === 'string') {\n        return 'agTextColumnFilter';\n    } else {\n        return true;\n    }\n}\n\nfunction createAgColumn(col: Column) {\n    return <AgGridColumn\n      headerName={ col.header_name }\n      field={ col.field }\n      key={ col.field }\n      type={ col.type }\n      valueFormatter={ valueFormatter(col) }\n      cellStyle={ cellStyle(col) }\n      filter={ columnFilter(col) }\n      floatingFilter={ true }\n      suppressSizeToFit={ false }\n      resizable={ true }\n    />;\n}\n\nfunction doubleFormatter(params: any) {\n  return numeral(params.value).format('0.00');\n}\n\nfunction double4dpsFormatter(params: any) {\n  return numeral(params.value).format('0.0000');\n}\n\nfunction doubleCommaFormatter(params: any) {\n  return numeral(params.value).format('0,0.00');\n}\n\nfunction intCommaFormatter(params: any) {\n  return numeral(params.value).format('0,0');\n}\n\nfunction buySellStyle(params: any) {\n  if (params.value < 0) {\n    return {color: 'red'};\n  } else {\n    return {color: 'green'};\n  }\n}\n\n// export default doubleFormatter;\nexport {\n    doubleFormatter,\n    doubleCommaFormatter,\n    intCommaFormatter,\n    createAgColumn,\n};\n","\nimport React, {Component } from 'react';\nimport { Theme, withStyles } from '@material-ui/core/styles';\nimport { AgGridColumn, AgGridReact } from '@ag-grid-community/react';\n\nimport Column from '../models/column';\nimport DataFrame from '../models/dataframe';\nimport { createAgColumn } from '../utils/grid_helper';\n\n\nconst styles = (theme: Theme) => ({\n\n});\n\ninterface OrdersProps {\n  classes: any,\n  orders: DataFrame | undefined,\n  onSecuritySelected: CallableFunction,\n}\n\ninterface OrdersState {\n  gridApi: any,\n  columns: AgGridColumn[] | undefined,\n}\n\nclass OrdersComponent extends Component<OrdersProps, OrdersState> {\n  constructor(props: OrdersProps) {\n    super(props);\n    this.state = {\n      gridApi: undefined,\n      columns: undefined,\n    };\n    this.onGridReady = this.onGridReady.bind(this);\n    this.onGridDataUpdated = this.onGridDataUpdated.bind(this);\n    this.onRowSelected = this.onRowSelected.bind(this);\n  }\n\n  componentDidUpdate(oldProps: OrdersProps) {\n    if (this.props.orders !== oldProps.orders) {\n      if (this.props.orders === undefined) {\n        this.setState({columns: undefined});\n      } else {\n        this.setState({columns: this.props.orders.columns.map((col: Column) => createAgColumn(col))});\n      }\n    }\n  }\n\n  onGridReady(params: any) {\n    this.setState({ gridApi: params.columnApi });\n  }\n\n  onGridDataUpdated(params: any) {\n    params.api.sizeColumnsToFit();\n  }\n\n  onRowSelected(event: any) {\n    if (this.props.onSecuritySelected !== undefined) {\n      if (event.node.selected == false) {\n        this.props.onSecuritySelected(undefined);\n      } else {\n        this.props.onSecuritySelected(event.data['sms_id']);\n      }\n    }\n  }\n\n  renderEmpty() {\n    return (<div></div>); \n  }\n\n  renderOrders(orders: DataFrame) {\n    const { columns } = this.state;\n    return (\n      <div className=\"ag-theme-fresh\" style={{ height: '100%', width: '100%' }}>\n        <AgGridReact\n          defaultColDef={{\n            resizable: true,\n            filter: true,\n            sortable: true,\n          }}\n          rowSelection={'single'}\n          rowData={orders.rows}\n          applyColumnDefOrder={true}\n          onGridReady={ this.onGridReady }\n          onFirstDataRendered={ this.onGridDataUpdated }\n          onRowDataUpdated={ this.onGridDataUpdated }\n          onRowDataChanged={ this.onGridDataUpdated }\n          onRowSelected={ this.onRowSelected }\n          >\n          {columns}  \n        </AgGridReact>\n      </div>\n    );\n  }\n\n  render() {\n    const { orders } = this.props;\n\n    if (orders === undefined) {\n      return this.renderEmpty();\n    } else {\n      return this.renderOrders(orders);\n    }\n  }\n}\n\nexport default withStyles(styles)(OrdersComponent);\n","\nimport React, {Component } from 'react';\nimport { Theme, withStyles } from '@material-ui/core/styles';\nimport { AgGridColumn, AgGridReact } from '@ag-grid-community/react';\n\nimport Column from '../models/column';\nimport DataFrame from '../models/dataframe';\nimport { createAgColumn } from '../utils/grid_helper';\n\n\nconst styles = (theme: Theme) => ({\n\n});\n\ninterface PositionsProps {\n  classes: any,\n  positions: DataFrame | undefined,\n}\n\ninterface PositionsState {\n  gridApi: any,\n  columns: AgGridColumn[] | undefined,\n}\n\nclass PositionsComponent extends Component<PositionsProps, PositionsState> {\n  constructor(props: PositionsProps) {\n    super(props);\n    this.state = {\n      gridApi: undefined,\n      columns: undefined,\n    };\n    this.onGridReady = this.onGridReady.bind(this);\n    this.onGridDataUpdated = this.onGridDataUpdated.bind(this);\n    this.onRowSelected = this.onRowSelected.bind(this);\n  }\n\n  componentDidUpdate(oldProps: PositionsProps) {\n    if (this.props.positions !== oldProps.positions) {\n      if (this.props.positions === undefined) {\n        this.setState({columns: undefined});\n      } else {\n        this.setState({columns: this.props.positions.columns.map((col: Column) => createAgColumn(col))});\n      }\n    }\n  }\n\n  onGridReady(params: any) {\n    this.setState({ gridApi: params.columnApi });\n  }\n\n  onGridDataUpdated(params: any) {\n    params.api.sizeColumnsToFit();\n  }\n\n  onRowSelected(event: any) {\n    if (event.node.selected == false) {\n      // todo handle unselect\n    } else {\n      // todo\n    }\n  }\n\n  renderEmpty() {\n    return (<div>No securities data</div>);\n  }\n\n  renderPositions(positions: DataFrame) {\n    const { columns } = this.state;\n    return (\n      <div className=\"ag-theme-fresh\" style={{ height: '100%', width: '100%' }}>\n        <AgGridReact\n          defaultColDef={{\n            resizable: true,\n            filter: true,\n            sortable: true,\n          }}\n          rowSelection={'single'}\n          rowData={positions.rows}\n          applyColumnDefOrder={true}\n          onGridReady={ this.onGridReady }\n          onFirstDataRendered={ this.onGridDataUpdated }\n          onRowDataUpdated={ this.onGridDataUpdated }\n          onRowDataChanged={ this.onGridDataUpdated }\n          onRowSelected={ this.onRowSelected }\n          >\n          {columns}  \n        </AgGridReact>\n      </div>\n    );\n  }\n\n  render() {\n    const { positions } = this.props;\n\n    if (positions === undefined) {\n      return this.renderEmpty();\n    } else {\n      return this.renderPositions(positions);  \n    }\n  }\n}\n\nexport default withStyles(styles)(PositionsComponent);\n","\nimport React, {Component } from 'react';\nimport { Theme, withStyles } from '@material-ui/core/styles';\nimport { AgGridColumn, AgGridReact } from '@ag-grid-community/react';\n\nimport Column from '../models/column';\nimport DataFrame from '../models/dataframe';\nimport { createAgColumn } from '../utils/grid_helper';\n\n\nconst styles = (theme: Theme) => ({\n\n});\n\ninterface SecuritiesProps {\n  classes: any,\n  securities: DataFrame | undefined,\n}\n\ninterface SecuritiesState {\n  gridApi: any,\n  columns: AgGridColumn[] | undefined,\n}\n\nclass SecuritiesComponent extends Component<SecuritiesProps, SecuritiesState> {\n  constructor(props: SecuritiesProps) {\n    super(props);\n    this.state = {\n      gridApi: undefined,\n      columns: undefined,\n    };\n    this.onGridReady = this.onGridReady.bind(this);\n    this.onGridDataUpdated = this.onGridDataUpdated.bind(this);\n    this.onRowSelected = this.onRowSelected.bind(this);\n  }\n\n  componentDidUpdate(oldProps: SecuritiesProps) {\n    if (this.props.securities !== oldProps.securities) {\n      if (this.props.securities === undefined) {\n        this.setState({columns: undefined});\n      } else {\n        this.setState({columns: this.props.securities.columns.map((col: Column) => createAgColumn(col))});\n      }\n    }\n  }\n\n  onGridReady(params: any) {\n    this.setState({ gridApi: params.columnApi });\n  }\n\n  onGridDataUpdated(params: any) {\n    params.api.sizeColumnsToFit();\n  }\n\n  onRowSelected(event: any) {\n    if (event.node.selected == false) {\n      // todo handle unselect\n    } else {\n      // todo\n    }\n  }\n\n  renderEmpty() {\n    return (<div>No securities data</div>);\n  }\n\n  renderSecurities(securities: DataFrame) {\n    const { columns } = this.state;\n    return (\n      <div className=\"ag-theme-fresh\" style={{ height: '100%', width: '100%' }}>\n        <AgGridReact\n          defaultColDef={{\n            resizable: true,\n            filter: true,\n            sortable: true,\n          }}\n          rowSelection={'single'}\n          rowData={securities.rows}\n          applyColumnDefOrder={true}\n          onGridReady={ this.onGridReady }\n          onFirstDataRendered={ this.onGridDataUpdated }\n          onRowDataUpdated={ this.onGridDataUpdated }\n          onRowDataChanged={ this.onGridDataUpdated }\n          onRowSelected={ this.onRowSelected }\n          >\n          {columns}  \n        </AgGridReact>\n      </div>\n    );\n  }\n\n  render() {\n    const { securities } = this.props;\n\n    if (securities === undefined) {\n      return this.renderEmpty();\n    } else {\n      return this.renderSecurities(securities);  \n    }\n  }\n}\n\nexport default withStyles(styles)(SecuritiesComponent);\n","\nimport React, {Component } from 'react';\nimport { Theme, withStyles } from '@material-ui/core/styles';\nimport { AgGridColumn, AgGridReact } from '@ag-grid-community/react';\n\nimport Column from '../models/column';\nimport DataFrame from '../models/dataframe';\nimport { createAgColumn } from '../utils/grid_helper';\n\n\nconst styles = (theme: Theme) => ({\n\n});\n\ninterface WeightsProps {\n  classes: any,\n  weights: DataFrame | undefined,\n  onSecuritySelected: CallableFunction,\n}\n\ninterface WeightsState {\n  gridApi: any,\n  columns: AgGridColumn[] | undefined,\n}\n\nclass WeightsComponent extends Component<WeightsProps, WeightsState> {\n  constructor(props: WeightsProps) {\n    super(props);\n    this.state = {\n      gridApi: undefined,\n      columns: undefined,\n    };\n    this.onGridReady = this.onGridReady.bind(this);\n    this.onGridDataUpdated = this.onGridDataUpdated.bind(this);\n    this.onRowSelected = this.onRowSelected.bind(this);\n  }\n\n  componentDidUpdate(oldProps: WeightsProps) {\n    if (this.props.weights !== oldProps.weights) {\n      if (this.props.weights === undefined) {\n        this.setState({columns: undefined});\n      } else {\n        this.setState({columns: this.props.weights.columns.map((col: Column) => createAgColumn(col))});\n      }\n    }\n  }\n\n  onGridReady(params: any) {\n    this.setState({ gridApi: params.columnApi });\n  }\n\n  onGridDataUpdated(params: any) {\n    params.api.sizeColumnsToFit();\n  }\n\n  onRowSelected(event: any) {\n    if (event.node.selected == false) {\n      this.props.onSecuritySelected(undefined);      \n    } else {\n      if (this.props.onSecuritySelected !== undefined) {\n        this.props.onSecuritySelected(event.data['sms_id']);\n      }\n    }\n  }\n\n  renderEmpty() {\n    return (<div></div>);\n  }\n\n  renderWeights(weights: DataFrame) {\n    const { columns } = this.state;\n    return (\n      <div className=\"ag-theme-fresh\" style={{ height: '100%', width: '100%' }}>\n        <AgGridReact\n          defaultColDef={{\n            resizable: true,\n            filter: true,\n            sortable: true,\n          }}\n          rowSelection={'single'}\n          rowData={weights.rows}\n          applyColumnDefOrder={true}\n          onGridReady={ this.onGridReady }\n          onFirstDataRendered={ this.onGridDataUpdated }\n          onRowDataUpdated={ this.onGridDataUpdated }\n          onRowDataChanged={ this.onGridDataUpdated }\n          onRowSelected={ this.onRowSelected }\n          >\n          {columns}  \n        </AgGridReact>\n      </div>\n    );\n  }\n\n  render() {\n    const { weights } = this.props;\n\n    if (weights === undefined) {\n      return this.renderEmpty();\n    } else {\n      return this.renderWeights(weights);  \n    }\n  }\n}\n\nexport default withStyles(styles)(WeightsComponent);\n","\nimport React, {Component } from 'react';\nimport { Theme, withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Box from '@material-ui/core/Box';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\n\nimport DataFrame from '../models/dataframe';\nimport OrdersComponent from './orders.component';\nimport PositionsComponent from './positions.component';\nimport SecuritiesComponent from './securities.component';\nimport WeightsComponent from './weights.component';\nimport { classes } from 'istanbul-lib-coverage';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: any;\n  value: any;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      style={{ height: '100%'}}\n      {...other}\n    >\n      {children}\n    </div>\n  );\n}\n\nconst styles = (theme: Theme) => ({\n  root: {\n    flexGrow: 1,\n    height: '100%',\n  },\n});\n\ninterface InputsProps {\n  classes: any,\n  securities: DataFrame | undefined,\n  positions: DataFrame | undefined,\n  rebal_weights: DataFrame | undefined,\n  rebal_orders: DataFrame | undefined,\n\n  onSecuritySelected: CallableFunction,\n}\n\ninterface InputsState {\n  tab_value: any,\n}\n\nfunction a11yProps(index: any) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nclass InputsComponent extends Component<InputsProps, InputsState> {\n  constructor(props: InputsProps) {\n    super(props);\n    this.state = {\n      tab_value: 0,\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event: any, newValue: number) {\n    console.log('tab change - ' + newValue);\n    this.setState({ tab_value: newValue });\n  }\n\n  render() {\n    const { classes, securities, positions, rebal_weights, rebal_orders } = this.props;\n    const { tab_value } = this.state;\n\n    return (\n      <div className={classes.root}>\n        <AppBar position='static'>\n          <Tabs value={tab_value} onChange={this.handleChange}>\n            <Tab label='Securities' />\n            <Tab label='Positions' />\n            <Tab label='Weights' />\n            <Tab label='Orders' />\n          </Tabs>\n        </AppBar>\n        <TabPanel value={tab_value} index={0}>\n          <SecuritiesComponent securities={securities} />\n        </TabPanel>\n        <TabPanel value={tab_value} index={1}>\n          <PositionsComponent positions={positions} />\n        </TabPanel>\n        <TabPanel value={tab_value} index={2}>\n          <WeightsComponent weights={rebal_weights} onSecuritySelected={ this.props.onSecuritySelected } />\n        </TabPanel>\n        <TabPanel value={tab_value} index={3}>\n          <OrdersComponent orders={rebal_orders} onSecuritySelected={ this.props.onSecuritySelected } />\n        </TabPanel>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(InputsComponent);\n","\nimport React, { Component } from 'react';\nimport { Theme, withStyles, makeStyles, fade } from '@material-ui/core/styles';\nimport { AgGridColumn, AgGridReact } from '@ag-grid-community/react';\n\nimport Column from '../models/column';\nimport DataFrame from '../models/dataframe';\nimport { createAgColumn } from '../utils/grid_helper';\n\n\nconst styles = (theme: Theme) => ({\n\n});\n\ninterface LogsProps {\n  classes: any,\n  rebal_logs: any,\n}\n\ninterface LogsState {\n  gridApi: any,\n  columns: Column[] | undefined,\n}\n\nclass LogsComponent extends Component<LogsProps, LogsState> {\n  constructor(props: LogsProps) {\n    super(props);\n    this.state = {\n      gridApi: undefined,\n      columns: undefined,\n    };\n    this.onGridReady = this.onGridReady.bind(this);\n    this.onGridDataUpdated = this.onGridDataUpdated.bind(this);\n  }\n\n  componentDidUpdate(oldProps: LogsProps) {\n    if (this.props.rebal_logs !== oldProps.rebal_logs) {\n      if (this.props.rebal_logs === undefined) {\n        this.setState({ columns: undefined });\n      } else {\n        this.setState({columns: this.props.rebal_logs.columns.map((col: Column) => createAgColumn(col))});\n      }\n    }\n  }\n\n  onGridReady(params: any) {\n    this.setState({ gridApi: params.columnApi });\n  }\n\n  onGridDataUpdated(params: any) {\n    params.api.sizeColumnsToFit();\n  }\n\n  renderEmpty() {\n    return (<div></div>);\n  }\n\n  renderWeights(weights: DataFrame) {\n    const { columns } = this.state;\n    return (\n      <div className=\"ag-theme-fresh\" style={{ height: '100%', width: '100%' }}>\n        <AgGridReact\n          defaultColDef={{\n            resizable: true,\n            filter: true,\n            sortable: true,\n          }}\n          rowData={weights.rows}\n          applyColumnDefOrder={true}\n          onGridReady={ this.onGridReady }\n          onFirstDataRendered={ this.onGridDataUpdated }\n          onRowDataUpdated={ this.onGridDataUpdated }\n          onRowDataChanged={ this.onGridDataUpdated }\n          >\n          {columns}  \n        </AgGridReact>\n      </div>\n    );\n  }\n\n  render() {\n    const { rebal_logs } = this.props;\n\n    if (rebal_logs === undefined) {\n      return this.renderEmpty();\n    } else {\n      return this.renderWeights(rebal_logs);  \n    }\n  }\n}\n\nexport default withStyles(styles)(LogsComponent);\n","\nimport React, { Component } from 'react';\nimport { Theme, withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\n\nconst styles = (theme: Theme) => ({\n\n});\n\ninterface InfoProps {\n  classes: any,\n  rebal_info: any,\n}\n\ninterface InfoState {\n\n}\n\nclass InfoComponent extends Component<InfoProps, InfoState> {\n  renderEmpty() {\n    return <div></div>\n  }\n\n  renderInfo(rebal_info: any) {\n    const fields = ['rebal_id', 'rebal_date', 'asset_class', 'positions', 'nav', \n      'prev_rebal_date', 'prev_positions', 'prev_nav', 'drift',\n    ];\n    let rows = [];\n    for (const field of fields) {\n      const value = rebal_info[field];\n      if (value === null || value === undefined) {\n        continue;\n      }\n\n      rows.push(\n        <TableRow key={field}>\n          <TableCell>{field}</TableCell>\n          <TableCell>{value}</TableCell>\n        </TableRow>\n      );\n    }\n\n    return (\n      <div>\n        <Table>\n          { rows }\n        </Table>\n      </div>\n    )\n  }\n\n  render() {\n    const { classes, rebal_info } = this.props;\n    if (rebal_info === undefined) {\n      return this.renderEmpty();\n    } else {\n      return this.renderInfo(rebal_info);\n    }\n  }\n}\n\nexport default withStyles(styles)(InfoComponent);\n","\nimport React, { Component } from 'react';\nimport { Theme, withStyles, makeStyles, fade } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n\nimport InfoComponent from './info.component';\n\n\nconst styles = (theme: Theme) => ({\n\n});\n\ninterface SummaryProps {\n  classes: any,\n  rebal_info: any,\n}\n\ninterface SummaryState {\n\n}\n\nclass SummaryComponent extends Component<SummaryProps, SummaryState> {\n  render() {\n    const { classes, rebal_info } = this.props;\n\n    return (\n      <Grid container>\n        <Grid item xs={4}>\n          <InfoComponent rebal_info={rebal_info} />\n        </Grid>\n      </Grid>            \n    );\n  }\n}\n\nexport default withStyles(styles)(SummaryComponent);\n","\nimport React, { Component } from 'react';\nimport { Theme, withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n\nimport DataFrame from '../models/dataframe';\nimport ExplorerService from '../service/explorer.service';\nimport HeaderComponent from './header.component';\nimport InputsComponent from './inputs.component';\nimport LogsComponent from './logs.component';\nimport SummaryComponent from './summary.component';\n\n\nconst styles = (theme: Theme) => ({\n  root: {\n    flexGrow: 1,\n    height: '100%',\n  },\n  grow: {\n    flexGrow: 1,\n  },\n});\n\ninterface MainProps {\n  classes: any,\n  match: any,\n}\n\ninterface MainState {\n  groupId: string,\n  rebalId: string,\n  explorer: ExplorerService | undefined,\n\n  rebal_info: any,\n  securities: DataFrame | undefined,\n  positions: DataFrame | undefined,\n  rebal_weights: DataFrame | undefined,\n  rebal_orders: DataFrame | undefined,\n  rebal_logs: DataFrame | undefined,\n}\n\ntype Nullable<T> = T | null;\n\nclass MainComponent extends Component<MainProps, MainState> {\n  ws: Nullable<WebSocket> = null;\n\n  constructor(props: MainProps) {\n    super(props);\n    this.state = {\n      groupId: '',\n      rebalId: '',\n      explorer: undefined,\n      rebal_info: undefined,\n      securities: undefined,\n      positions: undefined,\n      rebal_weights: undefined,\n      rebal_orders: undefined,\n      rebal_logs: undefined,\n    }\n    this.onConnection = this.onConnection.bind(this);\n    this.onSecuritySelected = this.onSecuritySelected.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(this.props);\n    this.setState({rebalId: this.props.match.rebalId})\n\n    if (this.state.explorer === undefined) {\n      const explorer = new ExplorerService(this.onConnection);\n      this.setState({'explorer': explorer});\n    }\n  }\n\n  onConnection() {\n    console.log('onConnection()');\n    const rebalId = this.props.match.params.rebalId;\n    this.loadRebalData(rebalId);\n  }\n\n  loadRebalData(rebalId: string) {\n    // reset current state\n    this.resetState();\n\n    // load new state\n    const { explorer, groupId } = this.state;\n    explorer?.rebalInfo(groupId, rebalId)\n      .then((values) => {\n        this.setState({rebal_info: values});\n        console.log('rebal_info');\n        console.log(values);\n      })\n      .catch((err) => console.log(err));\n\n    explorer?.rebalSecurities(groupId, rebalId)\n      .then((securities) => this.setState({securities: securities}))\n      .catch((err) => console.log(err));\n\n    explorer?.rebalPositions(groupId, rebalId)\n      .then((positions) => this.setState({positions: positions}))\n      .catch((err) => console.log(err));\n\n    explorer?.rebalWeights(groupId, rebalId)\n      .then((weights) => this.setState({rebal_weights: weights}))  \n      .catch((err) => console.log(err));\n\n    explorer?.rebalOrders(groupId, rebalId)\n      .then((orders) => this.setState({rebal_orders: orders}))  \n      .catch((err) => console.log(err));\n\n    explorer?.rebalLogs(groupId, rebalId, undefined)\n      .then((logs) => this.setState({rebal_logs: logs}))  \n      .catch((err) => console.log(err));\n  }\n\n  resetState() {\n    this.setState({\n      rebal_info: undefined,\n      securities: undefined,\n      positions: undefined,\n      rebal_weights: undefined,\n      rebal_orders: undefined,\n      rebal_logs: undefined,\n    });\n  }\n\n  onSecuritySelected(sms_id: string | undefined) {\n    const { groupId, rebalId, explorer } = this.state;\n    explorer?.rebalLogs(groupId, rebalId, sms_id)\n      .then((logs) => this.setState({rebal_logs: logs}))\n      .catch((err) => console.log(err));\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { rebal_info, securities, positions, rebal_weights, rebal_orders, rebal_logs } = this.state;\n\n    return (\n      <div className={classes.root}>\n        <HeaderComponent title='Rebal POC'/>\n\n        <Grid container className={classes.root} direction='row' spacing={0}>\n          <Grid container style={{ height: '50%' }}>\n            <SummaryComponent rebal_info={ rebal_info } />\n          </Grid>\n          <Grid container style={{ height: '50%' }}>\n            <Grid item xs={6}>\n              <InputsComponent\n                securities={securities}\n                positions={positions}\n                rebal_weights={rebal_weights}\n                rebal_orders={rebal_orders}\n                onSecuritySelected={this.onSecuritySelected} \n              />\n            </Grid>\n            <Grid item xs={6}>\n              <LogsComponent rebal_logs={rebal_logs} />\n            </Grid>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(MainComponent);\n","\nimport React, {Component } from 'react';\nimport { Theme, withStyles } from '@material-ui/core/styles';\nimport { AgGridColumn, AgGridReact } from '@ag-grid-community/react';\nimport { AppBar, Toolbar, Typography } from \"@material-ui/core\";\n\nimport Column from '../models/column';\nimport DataFrame from '../models/dataframe';\nimport { createAgColumn } from '../utils/grid_helper';\n\n\nconst styles = (theme: Theme) => ({\n  title: {\n    backgroundColor: '#4466ff',\n    color: '#ffffff',\n    paddingLeft: 10,\n  },\n});\n\ninterface DataframeProps {\n  classes: any,\n  title: string,\n  dataframe: DataFrame,\n  onSelect: CallableFunction | undefined,\n}\n\ninterface DataframeState {\n  gridApi: any,\n  columns: AgGridColumn[] | undefined,\n}\n\nclass DataframeComponent extends Component<DataframeProps, DataframeState> {\n  constructor(props: DataframeProps) {\n    super(props);\n    this.state = {\n      gridApi: undefined,\n      columns: undefined,\n    };\n\n    this.onGridReady = this.onGridReady.bind(this);\n    this.onGridDataUpdated = this.onGridDataUpdated.bind(this);\n    this.onRowSelected = this.onRowSelected.bind(this);\n  }\n\n  componentDidUpdate(oldProps: DataframeProps) {\n    if (this.props.dataframe !== oldProps.dataframe) {\n      if (this.props.dataframe === undefined) {\n        this.setState({columns: undefined});\n      } else {\n        this.setState({columns: this.props.dataframe.columns.map((col: Column) => createAgColumn(col))});\n      }\n    }\n  }\n\n  onGridReady(params: any) {\n    this.setState({ gridApi: params.columnApi });\n  }\n\n  onGridDataUpdated(params: any) {\n    setTimeout(() => {\n      var allColIds = params.columnApi.getAllColumns().map((col: any) => col.colId);\n      params.columnApi.autoSizeColumns(allColIds);\n    }, 100);\n  }\n\n  onRowSelected(event: any) {\n    if (this.props.onSelect !== undefined) {\n      if (event.node.selected == false) {\n        this.props.onSelect(undefined);\n      } else {\n        this.props.onSelect(event.data);\n      }\n    }\n  }\n\n  renderEmpty() {\n    return (<div></div>); \n  }\n\n  renderDataframe(dataframe: DataFrame) {\n    const { title, classes } = this.props;\n    const { columns } = this.state;\n    return (\n      <div className=\"ag-theme-fresh\" style={{ height: '95%', width: '100%' }}>\n        <Typography className={ classes.title }>{ title }</Typography>\n        <AgGridReact\n          defaultColDef={{\n            resizable: true,\n            filter: true,\n            sortable: true,\n          }}\n          rowSelection={'single'}\n          rowData={dataframe.rows}\n          applyColumnDefOrder={true}\n          onGridReady={ this.onGridReady }\n          onFirstDataRendered={ this.onGridDataUpdated }\n          onRowDataUpdated={ this.onGridDataUpdated }\n          onRowDataChanged={ this.onGridDataUpdated }\n          onRowSelected={ this.onRowSelected }\n          >\n          {columns}  \n        </AgGridReact>\n      </div>\n    );\n  }\n\n  render() {\n    const { dataframe } = this.props;\n\n    if (dataframe === undefined) {\n      return this.renderEmpty();\n    } else {\n      return this.renderDataframe(dataframe);\n    }\n  }\n}\n\nexport default withStyles(styles)(DataframeComponent);\n","\nimport React, { Component } from 'react';\nimport { Theme, withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport { RadialChart, makeVisFlexible } from 'react-vis';\n\nimport DataFrame from '../models/dataframe';\n\n\nconst FlexRadial = makeVisFlexible(RadialChart);\nconst styles = (theme: Theme) => ({\n});\n\ninterface GroupChartProps {\n  classes: any,\n  group_rebals: DataFrame | undefined,\n}\n\ninterface GroupChartState {}\n\nclass GroupChartComponent extends Component<GroupChartProps, GroupChartState> {\n  constructor(props: GroupChartProps) {\n    super(props);\n  }\n\n  renderEmpty() {\n    return (<div></div>);\n  }\n\n  renderBuySell(groupRebals: DataFrame) {\n    let buyCount = 0;\n    let sellCount = 0;\n    for (const row of groupRebals.rows) {\n      if (row.quantity < 0) {\n        sellCount += 1;\n      } else {\n        buyCount += 1;\n      }\n    }\n\n    return (\n      <FlexRadial\n        data={[\n          { angle: (buyCount / (buyCount + sellCount)) * 360.0, label: 'Buys', color: 'green' },\n          { angle: (sellCount / (buyCount + sellCount)) * 360.0, label: 'Sells', color: 'red' },\n        ]}\n        showLabels={ true }\n      />  \n    );\n  }\n\n  renderBuySellNotional(groupRebals: DataFrame) {\n    let buyNotl = 0;\n    let sellNotl = 0;\n    for (const row of groupRebals.rows) {\n      if (row.quantity < 0) {\n        sellNotl += Math.abs(row['notional_usd']);\n      } else {\n        buyNotl += row['notional_usd'];\n      }\n    }\n\n    return (\n      <FlexRadial\n        data={[\n          { angle: (buyNotl / (buyNotl + sellNotl)) * 360.0, label: 'Buys (USD)', color: 'green' },\n          { angle: (sellNotl / (buyNotl + sellNotl)) * 360.0, label: 'Sells (USD)', color: 'red' },\n        ]}\n        showLabels={ true }\n      />\n    );\n  }\n\n  renderIndustry(groupRebals: DataFrame, buySell: string) {\n    let industries = new Map<string, number>();\n    for (const row of groupRebals.rows) {\n      const industry = row['industry'];\n      let curr = industries.get(industry);\n      if (curr === undefined) {\n        curr = 0;\n      }\n\n      if (buySell === 'buys' && row['quantity'] > 0) {\n        curr += row['notional_usd'];\n      } else if (buySell == 'sells' && row['quantity'] < 0) {\n        curr += Math.abs(row['notional_usd']);\n      }\n\n      industries.set(industry, curr);\n    }\n\n    let total = 0;\n    for (const value of Array.from(industries.values())) {\n      total = total + value;\n    }\n\n    let data: any[] = [];\n    industries.forEach((value, key) => {\n      data.push({\n        angle: (value / total) * 360.0,\n        label: key,\n      });\n    });\n\n    return (\n      <FlexRadial data={ data } showLabels={ true } />\n    );\n  }\n\n  renderCharts(groupRebals: DataFrame) {\n    return (\n      <Grid container direction='row'>\n        <Grid container item>\n          { this.renderBuySell(groupRebals) }\n        </Grid>\n        <Grid container item>\n          { this.renderBuySellNotional(groupRebals) }\n        </Grid>\n        <Grid container item>\n          { this.renderIndustry(groupRebals, 'buys') }\n        </Grid>\n      </Grid>\n    );\n  }\n\n  render() {\n    const { group_rebals } = this.props;\n    if (group_rebals === undefined) {\n      return this.renderEmpty();\n    } else {\n      return this.renderCharts(group_rebals);\n    }\n  }\n}\n\nexport default withStyles(styles)(GroupChartComponent);\n","\nimport React, {Component } from 'react';\nimport { Theme, withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport Values from '../models/values';\n\n\nconst styles = (theme: Theme) => ({\n  root: {\n    flexGrow: 1,\n    height: '100%',\n  },\n});\n\ninterface GrsProps {\n  classes: any,\n  values: Values,\n}\n\ninterface GrsState {}\n\n\nclass GroupRebalStatsComponent extends Component<GrsProps, GrsState> {\n  constructor(props: GrsProps) {\n    super(props);\n  }\n\n  renderEmpty() {\n    const { classes } = this.props;\n    return (<div className={ classes.root }></div>);\n  }\n\n  renderValues(values: Values) {\n    const { classes } = this.props;\n    const fields = [\n      'portfolios',\n      'full_rebals',\n      'data_duration',\n      'rebal_duration',\n    ];\n\n    let rows = [];\n    for (const field of fields) {\n      const value = values.values[field];\n      if (value === null || value === undefined) {\n        continue;\n      }\n      rows.push(\n        <TableRow key={field}>\n          <TableCell>{field}</TableCell>\n          <TableCell>{value}</TableCell>\n        </TableRow>\n      );\n    }\n\n    return (\n      <div className={ classes }>\n        <Table>\n          <TableBody>{ rows }</TableBody>\n        </Table>\n      </div>\n    )\n  }\n\n  render() {\n    const { values } = this.props;\n    if (values === undefined) {\n      return this.renderEmpty();\n    } else {\n      return this.renderValues(values);\n    }\n  }\n}\n\nexport default withStyles(styles)(GroupRebalStatsComponent);\n","\nimport React, { Component } from 'react';\nimport { Theme, withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n\nimport DataframeComponent from './dataframe.component';\nimport ExplorerService from '../service/explorer.service';\nimport GroupChartsComponent from './group_charts.component';\nimport GroupRebalStatsComponent from './group_rebal_stats.component';\nimport HeaderComponent from './header.component';\nimport InputsComponent from './inputs.component';\nimport LogsComponent from './logs.component';\nimport DataFrame from '../models/dataframe';\nimport Values from '../models/values';\n\nimport { from_yyyymmdd, yyyymmdd } from '../utils/dates';\nimport GroupRebalRequest from '../models/request_models';\nimport GroupRebalPortfoliosResponse from '../models/response_models';\n\n\nconst styles = (theme: Theme) => ({\n  root: {\n    flexGrow: 1,\n    height: '100%',\n  },\n  grow: {\n    flexGrow: 1,\n  },\n});\n\ninterface PortfolioGroupProps {\n  classes: any,\n  match: any,\n}\n\ninterface PortfolioGroupState {\n  explorer: ExplorerService | undefined,\n  groupId: string | undefined,\n  rebal_dates: Date[] | undefined,\n  rebal_date: Date | undefined,\n\n  // group rebal data\n  group_rebal_portfolios: DataFrame | undefined,\n  group_rebal_states: Values | undefined,\n  group_rebals: DataFrame | undefined,\n  group_security_orders: DataFrame | undefined,\n\n  // single rebal data\n  rebal_securities: DataFrame | undefined,\n  rebal_positions: DataFrame | undefined,\n  rebal_weights: DataFrame | undefined,\n  rebal_orders: DataFrame | undefined,\n  rebal_logs: DataFrame | undefined,\n\n  selected_portfolio: any,\n}\n\nclass PortfolioGroupComponent extends Component<PortfolioGroupProps, PortfolioGroupState> {\n  constructor(props: PortfolioGroupProps) {\n    super(props);\n    this.state = {\n      explorer: undefined,\n      groupId: undefined,\n      rebal_dates: undefined,\n      rebal_date: undefined,\n\n      group_rebal_portfolios: undefined,\n      group_rebal_states: undefined,\n      group_rebals: undefined,\n      group_security_orders: undefined,\n\n      rebal_securities: undefined,\n      rebal_positions: undefined,\n      rebal_weights: undefined,\n      rebal_orders: undefined,\n      rebal_logs: undefined,\n\n      selected_portfolio: undefined,\n    };\n\n    this.onConnect = this.onConnect.bind(this);\n    this.onSelectRebalDate = this.onSelectRebalDate.bind(this);\n    this.onSelectPortfolioRebal = this.onSelectPortfolioRebal.bind(this);\n    this.onSecuritySelected = this.onSecuritySelected.bind(this);\n    this.onOrderSelected = this.onOrderSelected.bind(this);\n    this.onRebalSecuritySelected = this.onRebalSecuritySelected.bind(this);\n    this.getGroupPortfolios = this.getGroupPortfolios.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({groupId: this.props.match.params.groupId});\n\n    if (this.state.explorer === undefined) {\n      const explorer = new ExplorerService(this.onConnect);\n      this.setState({'explorer': explorer});\n    }\n  }\n\n  onConnect() {\n    // load valid dates for group\n    const { explorer, groupId } = this.state;\n    explorer?.groupRebalDates(groupId!)\n      .then((values: Values) => {\n        console.log(values);\n        const rebal_dates = values.values['rebal_dates'].map((dt_str: string) => from_yyyymmdd(dt_str));\n        this.setState({'rebal_dates': rebal_dates});\n\n        // if there is only a single date automatically select it\n        if (rebal_dates.length === 1) {\n          console.log('Auto-selecting date: ' + rebal_dates[0]);\n          this.onSelectRebalDate(rebal_dates[0]);\n        }\n      })\n      .catch((error: any) => {\n        // TODO handle errors with error message notification/popup\n        console.log(error);\n      });\n  }\n\n  /**\n   * @description CALLING groupRebalStats using rest_explorer which will return Observable\n   * Subscribing the returned Observable in order to use the data\n   */\n  onSelectRebalDate(dataDate: Date) {\n    const { groupId } = this.state;\n    this.setState({rebal_date: dataDate});\n   \n    this.state.explorer?.groupRebalStats(groupId!, dataDate)\n      .then((values: Values) => {\n        this.setState({ group_rebal_states: values });\n      })\n      .catch((err: any) => {\n        console.log(err);\n      });\n    // get list of portfolios for groupid and rebal date\n    this.getGroupPortfolios(groupId as string, dataDate);\n    // simulate nothing selected\n    this.onSelectPortfolioRebal(undefined);\n  }\n\n  getGroupPortfolios(groupId: string, dataDate: Date) {\n    const groupRebalRequest: GroupRebalRequest = {\n      portfolioGroupId: groupId as string,\n      dataDate: yyyymmdd(dataDate)\n    }\n    this.state.explorer?.groupRebalPortfoliosRest(groupRebalRequest).subscribe({\n      next: (response: GroupRebalPortfoliosResponse) => {\n        this.setState({ group_rebal_portfolios: response })\n      },\n      error: (error: any) => console.log(error)\n    });\n  }\n\n  onSelectPortfolioRebal(portfolioRebal: any) {\n    console.log('onSelectPortfolioRebal');\n    console.log(portfolioRebal);\n\n    this.setState({ selected_portfolio: portfolioRebal });\n    if (portfolioRebal === undefined) {\n      this.loadGroupRebalData();\n    } else {\n      const { groupId } = this.state;\n      const { rebal_id } = portfolioRebal;\n      this.loadSingleRebalData(groupId!, rebal_id);\n    }\n  }\n\n  onSecuritySelected(security: any) {\n    if (security === undefined) {\n      this.setState({ group_security_orders: undefined });\n      return;\n    }\n\n    const { sms_id } = security;\n    const { groupId, rebal_date } = this.state;\n    this.state.explorer?.groupSecurityOrders(groupId!, sms_id, rebal_date!)\n      .then((df: DataFrame) => {\n        this.setState({ group_security_orders: df });\n      })\n      .catch((err: any) => {\n        console.log(err);\n      });\n  }\n\n  onOrderSelected(order: any) {\n    // todo impl\n  }\n\n  onRebalSecuritySelected(rebal_security: any) {\n    // todd impl\n  }\n\n  loadSingleRebalData(groupId: string, rebalId: string) {\n    const { explorer, rebal_date } = this.state;\n    explorer?.rebalSecurities(groupId, rebalId)\n      .then((securities: DataFrame) => this.setState({rebal_securities: securities}))\n      .catch((err: any) => console.log(err));\n\n    explorer?.rebalPositions(groupId, rebalId)\n      .then((positions: DataFrame) => this.setState({rebal_positions: positions}))\n      .catch((err: any) => console.log(err));\n\n    explorer?.rebalWeights(groupId, rebalId)\n      .then((weights: DataFrame) => this.setState({rebal_weights: weights}))\n      .catch((err: any) => console.log(err));\n\n    explorer?.rebalOrders(groupId, rebalId)\n      .then((orders: DataFrame) => this.setState({rebal_orders: orders}))\n      .catch((err: any) => console.log(err));\n\n    explorer?.rebalLogs(groupId, rebalId, undefined)\n      .then((logs: DataFrame) => this.setState({rebal_logs: logs}))\n      .catch((err: any) => console.log(err));\n  }\n\n  loadGroupRebalData() {\n    const { groupId, rebal_date } = this.state;\n    this.state.explorer?.groupRebals(groupId!, rebal_date!)\n      .then((df: DataFrame) => {\n        this.setState({ group_rebals: df });\n      })\n      .catch((err: any) => {\n        console.log(err);\n      });\n  }\n\n  renderPortfolio() {\n    const { rebal_securities, rebal_positions, rebal_weights, rebal_orders, rebal_logs } = this.state;\n    return (\n      <Grid container direction='column'>\n        <Grid item spacing={1} style={{ height: '100%', width: '50%' }}>\n          <InputsComponent\n            securities={rebal_securities}\n            positions={rebal_positions}\n            rebal_weights={rebal_weights}\n            rebal_orders={rebal_orders}\n            onSecuritySelected={this.onSecuritySelected}\n          />\n        </Grid>\n        <Grid item spacing={1} style={{ height: '100%', width: '50%' }}>\n          <LogsComponent rebal_logs={rebal_logs} />\n        </Grid>\n      </Grid>\n    );\n  }\n\n  renderGroup() {\n    const { group_rebals, group_security_orders } = this.state;\n    return (\n      <Grid container direction='column' style={{ height: '100%' }}>\n        <Grid container direction='row' style={{ width: '80%', height: '100%' }} >\n          <Grid container item style={{ height: '50%' }}>\n            <DataframeComponent\n              title='Rebalances'\n              dataframe={ group_rebals! }\n              onSelect={ this.onSecuritySelected }\n            />\n          </Grid>\n          <Grid container item style={{ height: '50%' }}>\n            <DataframeComponent\n              title='Orders'\n              dataframe={ group_security_orders! }\n              onSelect={ this.onOrderSelected }\n            />\n          </Grid>\n        </Grid>\n\n        <Grid container direction='row' style={{ width: '20%', height: '100%' }} >\n          <GroupChartsComponent group_rebals={ group_rebals } />\n        </Grid>\n      </Grid>\n    );\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { group_rebal_portfolios, group_rebal_states, selected_portfolio } = this.state;\n\n    // determines if we show group level summary or individual portfolio level details\n    let item = undefined;\n    if (selected_portfolio === undefined) {\n      item = this.renderGroup();\n    } else {\n      item = this.renderPortfolio();\n    }\n\n    return (\n      <div className={ classes.root }>\n        <HeaderComponent title='Rebal POC'/>\n\n        <Grid container className={classes.root} direction='column' spacing={0}>\n          <Grid container direction='row' style={{ width: '30%', height: '100%' }} >\n            <Grid container item style={{ height: '50%' }}>\n              <GroupRebalStatsComponent values={ group_rebal_states! } />\n            </Grid>\n            <Grid container direction='row' style={{ height: '50%' }}>\n              <DataframeComponent\n                title='Portfolios'\n                dataframe={ group_rebal_portfolios! }\n                onSelect={ this.onSelectPortfolioRebal } \n              /> \n            </Grid>\n          </Grid>\n          <Grid container direction='row' style={{ width: '70%', height: '100%' }} >\n            { item }\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(PortfolioGroupComponent);\n","import React, {useState} from 'react';\n\n/**\n * @param filter, setFilter\n * @returns Input Field\n */\nexport function GlobalFilter({filter, setFilter}: { filter: any, setFilter: any }) {\n  const [value, setValue] = useState(filter)\n  return (\n    <span>\n      <input\n        className='searchinput'\n        value={value || ''}\n        onChange={_this => {\n          setValue(_this.target.value);\n          setFilter(_this.target.value || \"\") // if value doesn't come then \"\"\n        }}\n        placeholder={'Search'}\n      />\n    </span>\n  )\n}","import React, {useEffect} from \"react\";\nimport {useRowSelect, useTable, useGlobalFilter, useExpanded, useGroupBy,} from 'react-table';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faAngleRight, faAngleDown} from '@fortawesome/free-solid-svg-icons';\nimport {GlobalFilter} from './react_table_action.component'\nimport './react_table.scss';\n\n\nexport interface ReactTableState {\n  columns: any | undefined,\n  data: any[],\n  groupByColumns: string[];\n}\n\n/**\n * @param props ReactTableState\n * @returns react table grid\n */\nfunction ReactTable(props: ReactTableState) {\n  const data = props.data;\n  const columns = props.columns;\n  useEffect(() => {\n    if (props.groupByColumns && props.groupByColumns.length) {\n      setGroupBy(props.groupByColumns);\n    }\n  }, []);\n  const tableInstance = useTable<any>(\n    {columns, data},\n    useGlobalFilter, // used for searching with globalFilter and setGlobalFilter\n    useGroupBy, // this should be used along with useExpanded\n    useExpanded,\n    useRowSelect,\n    // Use table's getToggleAllRowsSelectedProps method  to render a checkbox at first column\n    hooks => {\n      hooks.visibleColumns.push(columns => [\n        {\n          id: 'selection',\n\n          Header: ({getToggleAllRowsSelectedProps}: any) => (\n            <div>\n              <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\n            </div>\n          ),\n          Cell: ({row}: any) => (\n            <div>\n              <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\n            </div>\n          ),\n        },\n        ...columns,\n      ])\n    })\n\n\n  /**\n   * Add checkbox as first column to the react table\n   */\n  const IndeterminateCheckbox = React.forwardRef(\n    ({indeterminate, ...rest}: any, ref) => {\n      const defaultRef = React.useRef()\n      const resolvedRef: any = ref || defaultRef\n\n      React.useEffect(() => {\n        resolvedRef.current.indeterminate = indeterminate\n      }, [resolvedRef, indeterminate])\n\n      return (\n          <input type=\"checkbox\" ref={resolvedRef} {...rest} />\n      )\n    }\n  )\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    setGroupBy,\n    prepareRow,\n    state: {groupBy, expanded, globalFilter},\n    setGlobalFilter,\n  }: any = tableInstance\n\n  return (\n    <div>\n      <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter}/>\n      <table {...getTableProps()} className='reactTable'>\n        <thead>\n        {headerGroups.map((headerGroup: any) => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map((column: any) => (\n              <th {...column.getHeaderProps()}>\n                {column.render('Header')}\n              </th>\n            ))}\n          </tr>\n        ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n        {// Loop over the table rows\n          rows.map((row: any) => {\n            // Prepare the row for display\n            prepareRow(row)\n            return (\n              // Apply the row props\n              <tr {...row.getRowProps()}>\n                {// Loop over the rows cells\n                  row.cells.map((cell: any) => {\n                    // Apply the cell props\n                    return (\n                      <td {...cell.getCellProps()}>\n                        {\n                          cell.isGrouped ? (\n                            // If it's a grouped cell, add an expander and row count\n                            <>\n                              {/* TODO check the getToggleRowExpandedProps for null */}\n                              <span {...row.getToggleRowExpandedProps()}>\n                                                                    {row.isExpanded ?\n                                                                      <FontAwesomeIcon icon={faAngleDown}/> :\n                                                                      <FontAwesomeIcon icon={faAngleRight}/>}\n                                                                </span>{' '}\n                              <span className='fontWeightBold'>{cell.render('Cell')} ({row.subRows.length})</span>\n                            </>\n                          ) : cell.isAggregated ? (\n                            // If the cell is aggregated, use the Aggregated\n                            // renderer for cell\n                            <span className='fontWeightBold'>{cell.render('Aggregated')}</span>\n                          ) : cell.isPlaceholder ? null : ( // For cells with repeated values, render null\n                            // Otherwise, just render the regular cell\n                            cell.render('Cell')\n                          )\n                        }\n                      </td>\n                    )\n                  })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\n\nexport default ReactTable;\n\n\n","import React from 'react';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nconst styles = () => ({\n    root: {\n        alignItems: \"center\",\n        display: \"flex\", \n        justifyContent: \"center\", \n        height: \"100vh\", \n        width: \"100vw\"\n    }\n});\n\ninterface PropTypes{\n    // TODO - need to remove any and undefined from Interface\n    classes : any\n}\n\nfunction Spinner(props :PropTypes){\n    const { classes } = props;\n    return(\n        <div className={classes.root}>\n            <CircularProgress /> \n        </div>\n    )\n}\n\nexport default withStyles(styles)(Spinner);","import React, { Component } from \"react\";\n\nimport ExplorerService from \"../service/explorer.service\";\nimport ReactTable from \"./react_table_components/react_table.component\";\nimport HeaderComponent from './header.component';\nimport { Column } from \"react-table\";\nimport GroupRebalRequest from \"../models/request_models\";\nimport GroupRebalPortfoliosResponse from \"../models/response_models\";\nimport { yyyymmdd } from \"../utils/dates\";\nimport Spinner from \"../utils/Spinner\";\n\n\ninterface PortfolioListState {\n    explorer: ExplorerService | undefined;\n    columnData: any;\n    rows: any[];\n    groupId?: Number;\n}\n/**\n * @description This class renders portfolio list with hardcoded request data\n * TODO update request data dynamically\n */\nclass PortfolioList extends Component<any, PortfolioListState>{\n    showLoader = false;\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            explorer: undefined,\n            columnData: undefined,\n            rows: []\n        }\n        this.onConnection = this.onConnection.bind(this);\n    }\n\n    onConnection() {\n        this.getPortfolioData();\n    }\n\n    componentWillMount() {\n        this.showLoader = true;\n        if (this.state.explorer === undefined) {\n            const explorerSrvc = new ExplorerService(this.onConnection);\n            this.setState({ explorer: explorerSrvc });\n        }\n    }\n    componentDidMount() {\n        this.setState({ groupId: this.props.match.params.groupId });\n    }\n\n    getPortfolioData() {\n        const groupRebalRequest: GroupRebalRequest = {\n            portfolioGroupId: this.state.groupId?.toString() as string,\n            dataDate: yyyymmdd(new Date('Mon Sep 20 2021 00:00:00'))\n        }\n        // TODO: Hardcoded request just to create a example component for react table\n        this.state.explorer?.groupRebalPortfoliosRest(groupRebalRequest).subscribe({\n            next: (response: GroupRebalPortfoliosResponse) => {\n                const columns: Column[] = [];\n                response?.columns.forEach((col: any) => {\n                    const column: any = {\n                        Header: col.header_name,\n                        accessor: col.field,\n                        Cell: (rowInfo: any) => {\n                            return (\n                                // TODO - if in case value is coming -ve then to change\n                                <span className={Number(rowInfo?.value) >= 0 ? \"alignRight\" : \"\"}>\n                                    {rowInfo?.value}\n                                </span>\n                            )\n                        }\n                    };\n                    columns.push(column);\n                })\n                this.setState({ columnData: columns, rows: response.rows });\n                this.showLoader = false;\n            },\n            error: (error: any) => {\n                this.showLoader = false;\n                // TODO handle errors with error message notification/popup\n                console.log(error)\n            }\n        });\n    }\n\n    render() {\n        const { columnData, rows } = this.state;\n        return (\n            this.showLoader && !columnData ?\n                <Spinner />\n                :\n                <div>\n                    <HeaderComponent title='Portfolios' />\n                    <ReactTable\n                        columns={columnData}\n                        data={rows}\n                        groupByColumns={['portfolio_group_id', 'portfolio_id']}\n                    />\n                </div>\n        )\n    }\n}\n\nexport default PortfolioList;","import React, {Component} from 'react';\nimport {Theme, withStyles} from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport TextField from '@material-ui/core/TextField';\nimport { AgGridColumn, AgGridReact } from '@ag-grid-community/react';\n\nimport HeaderComponent from '../components/header.component';\n\nconst styles = (theme: Theme) => ({\n  root: {\n    flexGrow: 1,\n    height: '100%',\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  content: {\n    padding: 5,\n    height: '100%',\n  },\n});\n\ninterface TypeaheadProps {\n  classes: any,\n  match: any,\n}\n\ninterface TypeaheadState {\n  gridApi: any,\n  firmId: string,\n  search_string: string,\n  search_results: any,\n  options: any,\n  loading: boolean,\n  columns: any,\n}\n\nclass TypeaheadComponent extends Component<TypeaheadProps, TypeaheadState> {\n  constructor(props: TypeaheadProps) {\n    super(props);\n\n    this.onGridReady = this.onGridReady.bind(this);\n    this.onGridDataUpdated = this.onGridDataUpdated.bind(this);\n    this.onSearch = this.onSearch.bind(this);\n    this.highlight = this.highlight.bind(this);\n\n    this.state = {\n      gridApi: undefined,\n      firmId: '14',\n      search_string: '',\n      search_results: [],\n      options: {\n        filter: (x: any) => x,\n      },\n      loading: false,\n      columns: [\n        <AgGridColumn headerName='score' field='score' />,\n        <AgGridColumn headerName='entity_id' field='entity_id' />,\n        <AgGridColumn headerName='display_name' field='display_name' minWidth={400} cellRenderer={ this.highlight } />,\n        <AgGridColumn headerName='type' field='type' />,\n        <AgGridColumn headerName='issuer_id' field='issuer_id' />,\n        <AgGridColumn headerName='ownership_type' field='ownership_type' />,\n        <AgGridColumn headerName='currency' field='currency' />,\n        <AgGridColumn headerName='symbol' field='symbol' cellRenderer={ this.highlight } />,\n        <AgGridColumn headerName='account_number' field='account_number' />,\n      ],\n    };\n  }\n\n  componentDidMount() {\n    console.log('Starting search for: ' + this.props.match.params.firmId);\n    this.setState({ firmId: this.props.match.params.firmId });\n  }\n\n  onGridReady(params: any) {\n    this.setState({ gridApi: params.columnApi });\n  }\n\n  onGridDataUpdated(params: any) {\n    params.api.sizeColumnsToFit();\n  }\n\n  highlight(params: any) {\n    const { search_string } = this.state;\n    let value = params.data.display_name;\n    let index = value.toLowerCase().indexOf(search_string);\n    return value.substr(0, index) + '<strong>' + value.substr(index, search_string.length) +\n      '</strong>' + value.substring(index + search_string.length);\n  }\n\n  onSearch(event: any) {\n    const value = event.target.value;\n    if (value === undefined || value === null || value === '') {\n      return;\n    }\n\n    if (value.length < 3) {\n      return;\n    }\n\n    this.setState({search_string: value, loading: true});\n    const { firmId } = this.state;\n    const url = 'http://localhost:8888/entities?firm_id=' + firmId + '&search=' + value;\n    console.log(url);\n    fetch(url)\n      .then(resp => resp.json())\n      .then(json_res => {\n        console.log(json_res);\n        this.setState({search_results: json_res.results});\n      })\n      .catch(error => {\n        console.log(error);\n        this.setState({search_results: []});\n      })\n      .finally(() => {\n        this.setState({loading: false});\n      })\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { search_results, loading, columns } = this.state;\n\n    return (\n      <div className={classes.root}>\n        <HeaderComponent title='Search Entities' />\n\n        <Grid container className={classes.content} direction='row' spacing={0}>\n          <Grid item style={{ height: '50px', width: '100%' }}>\n            <TextField\n              style={{ width: 500 }}\n              label=\"Search Entities\"\n              variant=\"outlined\"\n              onChange={ this.onSearch }\n              InputProps={{\n                endAdornment: (\n                  <React.Fragment>\n                    { loading ? ( <CircularProgress color='inherit' size={20} /> ) : null }\n                  </React.Fragment>\n                )\n              }}\n            />\n          </Grid>\n          <Grid item style={{ height: '60%', width: '100%' }}>\n            <div className=\"ag-theme-fresh\" style={{ height: '100%', width: '100%' }}>\n              <AgGridReact\n                defaultColDef={{\n                  resizable: true,\n                  filter: true,\n                  sortable: true,\n                }}\n                rowSelection={'single'}\n                rowData={search_results}\n                applyColumnDefOrder={true}\n                onGridReady={ this.onGridReady }\n                onFirstDataRendered={ this.onGridDataUpdated }\n              >\n                {columns}\n              </AgGridReact>\n            </div>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(TypeaheadComponent);\n","\nimport React from 'react';\nimport { ModuleRegistry } from '@ag-grid-community/core';\nimport { ClientSideRowModelModule } from '@ag-grid-community/client-side-row-model';\n\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\n\nimport '@ag-grid-community/core/dist/styles/ag-grid.css';\nimport '@ag-grid-community/core/dist/styles/ag-theme-alpine.css';\nimport '@ag-grid-community/core/dist/styles/ag-theme-material.css';\nimport '@ag-grid-community/core/dist/styles/ag-theme-fresh.css';\n\nimport './App.css';\nimport './stylesheets/_main.scss' ;\nimport MainComponent from './components/main.component';\nimport PortfolioGroupComponent from './components/portfolio_group.component';\nimport PortfolioList from './components/portfolio_list.component';\nimport TypeAheadComponent from './views/typeahead.component';\n\n\nModuleRegistry.registerModules([\n  ClientSideRowModelModule,\n]);\n\nfunction App() {\n  return (\n    <Router>\n      <div style={{ height: '100%' }}>\n          <Route path='/rebal/:groupId/:rebalId' component={ MainComponent } />\n          <Route path='/group/:groupId' component={ PortfolioGroupComponent } />\n          <Route path='/portfolioList/:groupId' component={ PortfolioList } />\n          <Route path='/search/:firmId' component={ TypeAheadComponent } />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  type Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n  };\n  \n  export function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(\n        process.env.PUBLIC_URL,\n        window.location.href\n      );\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' }\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}